<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Objective-C-3-新特性</title>
    <link href="/2022/07/04/Objective-C-3-%E6%96%B0%E7%89%B9%E6%80%A7-SEL%E6%B6%88%E6%81%AF/"/>
    <url>/2022/07/04/Objective-C-3-%E6%96%B0%E7%89%B9%E6%80%A7-SEL%E6%B6%88%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="OC中类的实际形态是如何的？"><a href="#OC中类的实际形态是如何的？" class="headerlink" title="OC中类的实际形态是如何的？"></a>OC中类的实际形态是如何的？</h1><ul><li>类是以Class对象的形式存储在代码段之中.</li><li>OC 中，一个类 被认为是 元类的对象</li></ul><p>类名:存储的这个类的类名. NSString </p><p>方法存储在类对象之中.如何将方法存储在类对象之中.</p><h1 id="OC中的SEL是什么？"><a href="#OC中的SEL是什么？" class="headerlink" title="OC中的SEL是什么？"></a>OC中的SEL是什么？</h1><ul><li>叫做 selector 选择器</li><li>是一种变量类型，所以要在内存中申请空间存储数据.</li><li>转定义后，SEL本质是1个结构体. </li><li><strong>SEL结构体变量用于存储消息.类似于函数指针</strong><ul><li>消息类似于方法，OC中调用方法一般被称为发送消息</li></ul></li><li>使用SEL对象类发送消息 使编译器不会验证这个方法是否声明，直接向对象发送消息</li><li>一般作为Class对象 的属性，用于将类方法存储到 Class对象 中</li></ul><h1 id="SEL应如何使用？"><a href="#SEL应如何使用？" class="headerlink" title="SEL应如何使用？"></a>SEL应如何使用？</h1><ul><li>创建1个SEL对象，将方法的信息存储在这个SEL对象之中.</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SEL</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-meta">@selector(方法名)</span>;<br></code></pre></td></tr></table></figure><ul><li>SEL使用时不需要加*</li></ul><p><img src="/Users/tiger/Desktop/hexo-blog/source/_posts/Objective-C-3-%E6%96%B0%E7%89%B9%E6%80%A7-SEL%E6%B6%88%E6%81%AF/1.png" alt="image-20220703122856297"></p><h1 id="OC中调用方法的内部原理是怎样的？"><a href="#OC中调用方法的内部原理是怎样的？" class="headerlink" title="OC中调用方法的内部原理是怎样的？"></a>OC中调用方法的内部原理是怎样的？</h1><ul><li><p>现有这样一个方法，p1是Person类的对象，sayHi是其实例方法</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[p1 sayHi]</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><ol><li>获取到 sayHi 这一消息的 SEL 对象</li><li>将这个SEL消息发送给p1对象，此时，p1对象接收到这个SEL消息以后 就知道要调用方法</li><li>根据p1对象的isa指针寻找存储类Person（Class对象）</li><li>找到这个类（Class对象）以后 在其中去搜寻是否有和传入的SEL数据相匹配的方法</li><li>如果有 就执行  如果没有再向父类寻找 直到NSObject类，若都没有匹配的方法，则抛出异常</li></ol><h1 id="OC的重要机制-消息机制"><a href="#OC的重要机制-消息机制" class="headerlink" title="OC的重要机制:消息机制"></a>OC的重要机制:消息机制</h1><ul><li>调用方法的本质其实就是向对象发送SEL消息.</li><li>[p1 sayHi]; 向p1对象发送1条sayHi消息.</li><li>重点掌握:<br>1).方法是以SEL对象的形式存储起来.<br>2).如何拿到存储方法的SEL对象：Class 对象获取</li></ul><h1 id="SEL消息的其他用法？"><a href="#SEL消息的其他用法？" class="headerlink" title="SEL消息的其他用法？"></a>SEL消息的其他用法？</h1><h2 id="手动发送消息"><a href="#手动发送消息" class="headerlink" title="手动发送消息"></a>手动发送消息</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">调用对象的方法 将SEL数据发送给对象.<br>- <span class="hljs-params">(id)</span>performSelector:<span class="hljs-params">(SEL)</span>aSelector;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Person *p1 = [Person <span class="hljs-keyword">new</span>];<br><span class="hljs-type">SEL</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-meta">@selector(sayHi)</span>; <span class="hljs-comment">//先得到方法的SEL数据.</span><br>[p1 performSelector:s1];  <span class="hljs-comment">// 将这个SEL消息发送给p1对象，与 [p1 sayHi]效果是完全一样的.</span><br></code></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h1><ol><li>使用 SEL 对象时，如果方法有参数 那么方法名是带了冒号的 <ol><li>@selector(sayHi:);</li></ol></li><li>如果方法有参数就调用如下方法:</li></ol><ul><li>(id)performSelector:(SEL)aSelector withObject:(id)object;</li><li>(id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li><p>类是以Class对象的形式存储在代码段.</p></li><li><p>如何取到存储类的类对象.</p></li><li><p>如何使用类对象调用类的类方法 </p></li><li><p>方法是以SEL数据的形式存储的.</p></li><li><p>调用方法的两种方式.</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Objective-C-3-getter-setter</title>
    <link href="/2022/07/04/Objective-C-3-%E6%96%B0%E7%89%B9%E6%80%A7-getter-setter/"/>
    <url>/2022/07/04/Objective-C-3-%E6%96%B0%E7%89%B9%E6%80%A7-getter-setter/</url>
    
    <content type="html"><![CDATA[<h1 id="OC中是如何访问对象的属性的"><a href="#OC中是如何访问对象的属性的" class="headerlink" title="OC中是如何访问对象的属性的?"></a>OC中是如何访问对象的属性的?</h1><ul><li><p>OC中可以使用点语法来访问对象的属性</p></li><li><p>语法如下所示:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">//对象名.去掉下划线的属性名;<br>p1.name = @&quot;jack&quot;; //这个时候就会将@&quot;jack&quot;赋值给p1对象的_name属性.<br>NSString *name = p1.name; //把p1对象的_name属性的值取出来<br></code></pre></td></tr></table></figure><ul><li>但,OC的对象如果要为属性赋值或者取值 就要调用对应的getter或者setter.</li></ul><h1 id="点语法实际是如何进行的"><a href="#点语法实际是如何进行的" class="headerlink" title="点语法实际是如何进行的?"></a>点语法实际是如何进行的?</h1>   <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p1.age</span> = <span class="hljs-number">18</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>点语法在编译器编译的时候.会将点语法转换为调用setter、getter的代码.</li></ul><h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作:"></a>赋值操作:</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p1.age</span> = <span class="hljs-number">10</span><span class="hljs-comment">;//对象名.去掉下划线的属性名 = 数据; 转换为</span><br><span class="hljs-section">[p1 setAge:10]</span><span class="hljs-comment">; //  [对象名 set去掉下划线的属性名首字母大写:数据];</span><br></code></pre></td></tr></table></figure><h2 id="取值操作"><a href="#取值操作" class="headerlink" title="取值操作:"></a>取值操作:</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int age <span class="hljs-operator">=</span> p1.age<span class="hljs-comment">;//     对象名.去掉下划线的属性名; 转换为</span><br>int age <span class="hljs-operator">=</span> [p1 age]<span class="hljs-comment">;//    [对象名 去掉下划线的属性名];</span><br></code></pre></td></tr></table></figure><h1 id="点语法注意"><a href="#点语法注意" class="headerlink" title="点语法注意:"></a>点语法注意:</h1><ul><li><p>在getter和setter中慎用点语法,因为有可能会造成无限递归 而程序崩溃,</p></li><li><p>setter方法和getter方法名不符合规范 点语法就会出问题.</p></li><li><p>如果属性没有封装getter setter 是无法使用点语法的</p></li></ul><h1 id="property关键字是什么"><a href="#property关键字是什么" class="headerlink" title="@property关键字是什么?"></a>@property关键字是什么?</h1><ul><li><p>为了简化类属性 getter&#x2F;setter的声明代码,用于 <strong>自动生成类的getter、setter方法的声明</strong> 的关键字</p></li><li><p>因为是生成方法的声明,所以应该写在@interface类的声明之中.</p></li><li><p>语法: @property 数据类型 名称;</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">property</span> <span class="hljs-built_in">int</span> age; <br></code></pre></td></tr></table></figure><h1 id="property的原理是怎样的"><a href="#property的原理是怎样的" class="headerlink" title="@property的原理是怎样的?"></a>@property的原理是怎样的?</h1><ul><li>编译器在编译的时候.会根据@property生成getter和setter方法的实现</li></ul> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">property</span> <span class="hljs-built_in">int</span> age; <span class="hljs-comment">//@property 数据类型 名称;</span><br>- (<span class="hljs-built_in">void</span>)setAge:(<span class="hljs-built_in">int</span>)age;<span class="hljs-comment">//- (void)set首字母大写的名称:(数据类型)名称;</span><br>- (<span class="hljs-built_in">int</span>)age;<span class="hljs-comment">//- (数据类型)名称;</span><br></code></pre></td></tr></table></figure><h1 id="property注意"><a href="#property注意" class="headerlink" title="@property注意:"></a>@property注意:</h1><ul><li><p><strong>@property的类型</strong>和<strong>属性的类型</strong>一致.</p></li><li><p><strong>@property的名称</strong>和<strong>属性的名称</strong>一致(去掉下划线)</p></li><li><p>@property只是生成getter和setter方法的声明. 实现还要自己来. 属性还要自己定义.</p></li></ul><h1 id="synthesize关键字是什么"><a href="#synthesize关键字是什么" class="headerlink" title="@synthesize关键字是什么?"></a>@synthesize关键字是什么?</h1><ul><li><p>为了简化类属性 getter&#x2F;setter的实现代码,用于 <strong>自动生成类的getter、setter方法的实现</strong> 的关键字</p></li><li><p>因为是生成方法的实现,所以应该写在@implement类的实现之中.</p></li><li><p>语法: @synthesize 数据类型 名称;</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objective-c"> <br>//--------Person.h<br>@interface Person : NSObject<br>&#123;<br>   int _age;<br>&#125;<br>@property int age;//age 的 getter,setter 声明<br>@end<br><br>//--------Person.m<br>@implmentation Person<br>@synthesize age; //age 的 getter,setter 实现 ;@synthesize @property名称;<br>@end<br><br><br></code></pre></td></tr></table></figure><h1 id="synthesize的原理是怎样的"><a href="#synthesize的原理是怎样的" class="headerlink" title="@synthesize的原理是怎样的?"></a>@synthesize的原理是怎样的?</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">@implmentation Person<br>  @synthesize age;<br>@end<br>//--上述代码等同于如下代码:<br>@implementaion Person<br>&#123;<br>  int age;<br>&#125;<br>- (void)setAge:(int)age<br>&#123;<br>  self-&gt;age = age;<br>&#125;<br>- (int)age<br>&#123;<br>  return age;<br>&#125;<br>@end<br></code></pre></td></tr></table></figure><p>​    a. 生成1个真私有的属性.属性的类型和@synthesize对应的@property类型一致.</p><p>​      属性的名字和@synthesize对应的@property名字一致.</p><p>​    b. 自动生成setter方法的实现.</p><p>​      实现的方式: 将参数直接赋值给自动生成的那个私有属性.并且没有做任何的逻辑验证.</p><p>​    c. 自动生成getter方法的实现.</p><p>​      实现的方式: 将生成的私有属性的值返回.</p><p> \3. 希望@synthesize不要去自动生成私有属性了.</p><p>  getter setter的实现中操作我们已经写好的属性就可以了.</p><p>  语法:</p><p>  @synthesize @property名称 &#x3D; 已经存在的属性名;</p><p>  @synthesize age &#x3D; _age;</p><p>  1). 不会再去生成私有属性.</p><p>  2). 直接生成setter getter的实现,</p><p>​    setter的实现: 把参数的值直接赋值给指定的属性.</p><p>​    gettter的实现: 直接返回指定的属性的值.</p><p> \4. 注意:</p><p>  1). 如果直接写1个@synthesize</p><p>​    @synthesize name;</p><p>  2). 如果指定操作的属性.</p><p>​    @synthesize name &#x3D; _name;</p><p>  3). 生成的setter方法实现中 是没有做任何逻辑验证的 是直接赋值.</p><p>​    生成的getter方法的实现中 是直接返回属性的值.</p><p>​     如果setter或者getter有自己的逻辑验证 那么就自己在类的实现中重写就可以了.</p><p> \5. 批量声明</p><p>  1). 如果多个@property的类型一致. 可以批量声明.</p><p>​    @property float height,weight;</p><p>  2). @synthesize也可以批量声明.</p><p>​    @synthesize name &#x3D; _name,age &#x3D; _age,weight &#x3D; _weight,height &#x3D; _height;</p><p> \1. @property只是生成getter setter 的声明.  </p><p>   @synthesize是生成getter setter 的实现.</p><p>   这种写法是Xcode4.4之前的写法. 从Xcode4.4以后.Xcode对@property做了1个增强</p><p> \2. @property增强</p><p>   只需要写1个@property 编译器就会自动</p><p>   \1) 生成私有属性.</p><p>   2).生成getter setter的声明.</p><p>   3).生成getter setter的实现.</p><p>   @property NSString *name;</p><p>   做的事情</p><p>   1). 自动的生成1个私有属性,属性的类型和@property类型一致 属性的名称和@property的名称一致 属性的名称自动的加1个下划线.</p><p>   2). 自动的生成这个属性的getter setter方法的声明</p><p>   3). 自动的生成这个属性的getter setter方法的实现.</p><p>​     setter的实现: 直接将参数的值赋值给自动生成的私有属性.</p><p>​     getter的实现: 直接返回生成的私有属性的值.</p><p> 3.使用注意.</p><p>  1). @property的类型一定要和属性的类型一致. </p><p>​    名称要和属性的名称一致 只是去掉下划线.</p><p>  2). 也可以批量声明相同类型的@property</p><p>  3). @property生成的方法实现没有做任何逻辑验证.</p><p>​    setter: 直接赋值</p><p>​    getter： 直接返回.</p><p>​    所以,我们可以重写setter来自定义验证逻辑.如果重写了setter 还会自动生成getter</p><p>​    如果重写了getter 还会自动生成setter </p><p>​    如果同时重写getter setter 那么就不会自动生成私有属性了.</p><p>  \4. 如果你想为类写1个属性 并且为这个属性封装getter setter</p><p>   1个@property就搞定.</p><p>  \5. 继承.</p><p>   父类的@property一样可以被子类继承.</p><p>   @property生成的属性是私有的 在子类的内部无法直接访问生成的私有属性。</p><p>   但是可以通过setter getter来访问。     </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Objective-C-1-概述</title>
    <link href="/2022/07/04/Objective-C-1-%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/07/04/Objective-C-1-%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
